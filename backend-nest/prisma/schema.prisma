generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model job_count_summary {
  id            BigInt    @id @default(autoincrement())
  date          DateTime  @db.Date
  summary       String
  model_version String?   @default("v1")
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
}

model job_insights {
  id            BigInt    @id @default(autoincrement())
  date          DateTime  @db.Date
  summary       String
  model_version String?   @default("v1")
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
}

model job_trend_forecast {
  id              BigInt    @id @default(autoincrement())
  date            DateTime  @db.Date
  predicted_count Int?
  lower_bound     Int?
  upper_bound     Int?
  model_version   String?   @default("v1")
  created_at      DateTime? @default(now()) @db.Timestamp(6)
}

model jobs {
  id             BigInt    @id @default(autoincrement())
  title          String?
  company        String?
  location       String?
  salary         BigInt?
  url            String?
  summary        String?
  skills         String[]
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  description    String?
  collected_date DateTime? @db.Date
  via            String?
}

model prefecture_job_counts {
  id             BigInt    @id @default(autoincrement())
  collected_date DateTime  @db.Date
  prefecture     String
  job_count      Int
  created_at     DateTime? @default(now()) @db.Timestamptz(6)

  @@unique([collected_date, prefecture], map: "unique_date_prefecture")
}

model skill_trends {
  id             BigInt    @id @default(autoincrement())
  skill          String
  trend_score    Float
  latest_count   Int
  collected_date DateTime? @default(dbgenerated("CURRENT_DATE")) @db.Date

  @@unique([skill, collected_date], map: "unique_skill_collected_date")
}

model trend_score_summary {
  id            BigInt    @id @default(autoincrement())
  date          DateTime  @db.Date
  summary       String
  model_version String?   @default("v1")
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
}

model users {
  id          String        @id(map: "User_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email       String        @unique(map: "User_email_key")
  password    String
  name        String?
  created_at  DateTime?     @default(now()) @db.Timestamptz(6)
  avatar_url  String?
  user_skills user_skills[]
}

model user_skills {
  id         BigInt    @id @default(autoincrement())
  user_id    String?   @db.Uuid
  skill      String
  level      Int?      @default(3)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
